import os
import platform
import subprocess
import json
import re
from datetime import datetime
import requests

OLLAMA_URL = "http://localhost:11434/api/chat"
MODEL = "gemma3:12b-it-qat"
HISTORY_DIR = "history_logs"

os.makedirs(HISTORY_DIR, exist_ok=True)


def current_timestamp():
    return datetime.now().strftime("%Y-%m-%d_%H%M%S")


def ask_model_for_commands(prompt, history):
    messages = history + [
        {"role": "user", "content": prompt}
    ]

    response = requests.post(
        OLLAMA_URL,
        headers={"Content-Type": "application/json"},
        json={
            "model": MODEL,
            "messages": messages,
            "stream": False,
            "options": {"temperature": 0.1}
        }
    )

    if response.status_code != 200:
        print(f"❌ Model request failed with status: {response.status_code}")
        return "", []

    reply = response.json().get("message", {}).get("content", "")
    print("\n🤖 Commands generated by model:")
    print(reply)

    # Extract commands inside ```batch ...``` or ```bash ...``` blocks
    blocks = re.findall(r"```(?:batch|bash)\s*([\s\S]*?)```", reply)
    commands = []
    for block in blocks:
        for line in block.splitlines():
            line = line.strip()
            if line and not line.startswith("#"):
                commands.append(line)
    return reply, commands


def execute_command(command):
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True
        )
        return result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return "", str(e)


def main():
    os_name = platform.system()
    print("🤖 Terminal Assistant Ready!")
    print(f"💡 Operating System: {os_name}")
    print("💡 Default task: Create an empty folder named 'test123' on the desktop")
    print("🔁 Enter a new task or press Enter to use the default task:")

    task = input("📝 Task description: ").strip()
    if not task:
        task = "Create an empty folder named 'test123' on the desktop"

    # Initial history includes OS info and code block instructions
    history = [
        {
            "role": "system",
            "content": (
                f"You are an assistant that converts natural language tasks into a series of terminal commands running on {os_name}. "
                "Each command must be valid and executable. "
                "For Windows, wrap commands in ```batch ...```. "
                "For Linux/macOS, wrap commands in ```bash ...```."
            )
        }
    ]

    session_log = {
        "start_time": current_timestamp(),
        "task": task,
        "commands": []
    }

    while True:
        full_reply, commands = ask_model_for_commands(task, history)
        history.append({"role": "assistant", "content": full_reply})

        if not commands:
            print("⚠️ No valid commands detected, exiting.")
            break

        for idx, cmd in enumerate(commands, start=1):
            print(f"\n💬 Command {idx}: {cmd}\nExecute? (y/n)")
            user_confirm = input("> ").strip().lower()

            expanded_cmd = os.path.expandvars(os.path.expanduser(cmd))

            if user_confirm in ("y", "yes"):
                stdout, stderr = execute_command(expanded_cmd)

                print(f"📤 Output of command {idx}:\n{stdout}")
                if stderr:
                    print(f"⚠️ Error in command {idx}:\n{stderr}")

                session_log["commands"].append({
                    "command_index": idx,
                    "original_command": cmd,
                    "expanded_command": expanded_cmd,
                    "executed": True,
                    "stdout": stdout,
                    "stderr": stderr
                })
            else:
                print(f"🚫 Skipped command {idx}")
                session_log["commands"].append({
                    "command_index": idx,
                    "original_command": cmd,
                    "expanded_command": expanded_cmd,
                    "executed": False,
                    "stdout": "",
                    "stderr": ""
                })

        print("\n🔁 Any further tasks? Press Enter to exit or type a new task:")
        task = input("📝 Next task: ").strip()
        if not task:
            break

        history.append({"role": "user", "content": task})
        session_log["task"] += " → " + task

    # Save session log
    filename = os.path.join(HISTORY_DIR, f"{current_timestamp()}.json")
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(session_log, f, indent=2, ensure_ascii=False)

    print(f"\n✅ Task completed, session log saved: {filename}")


if __name__ == "__main__":
    main()

